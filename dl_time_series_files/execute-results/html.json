{
  "hash": "db6ae996746ece83e0ee4388e74ef82e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Deep Learning for TS\"\nformat:\n  html:\n    code-fold: true\njupyter: python3\nengine: knitr\n---\n\n\n**Deep Learning For Time Series**\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n#!pip3 install scikit-learn\n#!pip3 install tensorflow\n#!pip3 install yfinance\n#!pip3 install plotly\n#!pip3 install statsmodels\n#!pip3 install IPython\n#!pip3 install matplotlib\n#!pip3 install seaborn\n#!pip3 install jupyter\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport yfinance as yf\nimport plotly.express as px\nimport statsmodels.api as sm \nfrom IPython.display import IFrame\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error\n#from tensorflow import keras\n#from tensorflow.keras import layers\n#from tensorflow.keras import initializers\n#from tensorflow.keras import regularizers\n#from keras.layers import Dense, SimpleRNN, LSTM, GRU\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pfizer\npfe = yf.download(\"PFE\", '2019-01-01','2024-04-05')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[*********************100%%**********************]  1 of 1 completed\n```\n\n\n:::\n\n```{.python .cell-code}\npfe = pfe.reset_index()\npfe = pfe.rename(columns={'Date':'t', 'Adj Close':'y'})\npfe = pfe[['t', 'y']]\nt_pfe = np.array([*range(0,pfe.shape[0])])\nx_pfe = np.array(pfe['y']).reshape(t_pfe.shape[0],1)\nfeature_columns_pfe = [0]\ntarget_columns_pfe = [0]\n\n# Teva\nteva = yf.download(\"TEVA\", '2019-01-01','2024-04-05')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[*********************100%%**********************]  1 of 1 completed\n```\n\n\n:::\n\n```{.python .cell-code}\n\nteva = teva.reset_index()\nteva = teva.rename(columns={'Date':'t', 'Adj Close':'y'})\nteva = teva[['t', 'y']]\nt_teva = np.array([*range(0,teva.shape[0])])\nx_teva = np.array(teva['y']).reshape(t_teva.shape[0],1)\nfeature_columns_teva = [0]\ntarget_columns_teva = [0]\n```\n:::\n\n\n# Original Data\n\n:::panel-tabset\n\n## Large-Scale Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\nprint(type(t_pfe), type(x_pfe))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'numpy.ndarray'> <class 'numpy.ndarray'>\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(t_pfe.shape, x_pfe.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1323,) (1323, 1)\n```\n\n\n:::\n\n```{.python .cell-code}\n# Plot the Pfizer data\nfig, ax = plt.subplots()\nfor i in range(0,x_pfe.shape[1]):\n    ax.plot(t_pfe, x_pfe[:,i],'o',alpha = 0.5)\n    ax.plot(t_pfe, x_pfe[:,i],\"-\")\nax.plot(t_pfe, 0*x_pfe[:,0],\"-\") # add baseline for reference \nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Generic and Specialty Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\nprint(type(t_teva), type(x_teva))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'numpy.ndarray'> <class 'numpy.ndarray'>\n```\n\n\n:::\n\n```{.python .cell-code}\nprint(t_teva.shape, x_teva.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1323,) (1323, 1)\n```\n\n\n:::\n\n```{.python .cell-code}\n# Plot the Teva data\nfig, ax = plt.subplots()\nfor i in range(0,x_teva.shape[1]):\n    ax.plot(t_teva, x_teva[:,i],'o',alpha = 0.5)\n    ax.plot(t_teva, x_teva[:,i],\"-\")\nax.plot(t_teva, 0*x_teva[:,0],\"-\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n:::\n\n\n:::\n\n# Data Preprocessing\n\n## Data Normalization\n\n:::panel-tabset\n\n## Large-Scale Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\n# Normalize the Pfizer data\nprint(np.mean(x_pfe,axis=0).shape,np.std(x_pfe,axis=0).shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1,) (1,)\n```\n\n\n:::\n\n```{.python .cell-code}\nx_pfe=(x_pfe-np.mean(x_pfe,axis=0))/np.std(x_pfe,axis=0)\nprint(x_pfe.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1323, 1)\n```\n\n\n:::\n\n```{.python .cell-code}\n# Plot the normalized Pfizer data\nfig, ax = plt.subplots()\nfor i in range(0,x_pfe.shape[1]):\n    ax.plot(t_pfe, x_pfe[:,i],'o')\n    ax.plot(t_pfe, x_pfe[:,i],\"-\")\nax.plot(t_pfe, 0*x_pfe[:,0],\"-\") \nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n:::\n\n## Generic and Specialty Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\n# Normalize the Teva data\nprint(np.mean(x_teva,axis=0).shape,np.std(x_teva,axis=0).shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1,) (1,)\n```\n\n\n:::\n\n```{.python .cell-code}\nx_teva=(x_teva-np.mean(x_teva,axis=0))/np.std(x_teva,axis=0)\n\n# Plot the normalized Teva data\nfig, ax = plt.subplots()\nfor i in range(0,x_teva.shape[1]):\n    ax.plot(t_teva, x_teva[:,i],'o')\n    ax.plot(t_teva, x_teva[:,i],\"-\")\nax.plot(t_teva, 0*x_teva[:,0],\"-\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-6-7.png){width=672}\n:::\n:::\n\n\n:::\n\n## Data Splitting\n\n:::panel-tabset\n\n## Large-Scale Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\n# Split the Pfizer data\nsplit_fr = 0.8\ncut=int(split_fr*x_pfe.shape[0])\ntt_pfe=t_pfe[0:cut]; xt_pfe=x_pfe[0:cut]\ntv_pfe=t_pfe[cut:]; xv_pfe=x_pfe[cut:]\n\n# Plot the split Pfizer data\nfig, ax = plt.subplots()\nfor i in range(0,x_pfe.shape[1]):\n    ax.plot(tt_pfe, xt_pfe[:,i],'ro',alpha=0.25)\n    ax.plot(tt_pfe, xt_pfe[:,i],\"g-\")\nfor i in range(0,x_pfe.shape[1]):\n    ax.plot(tv_pfe, xv_pfe[:,i],'bo',alpha=0.25)\n    ax.plot(tv_pfe, xv_pfe[:,i],\"g-\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-7-9.png){width=672}\n:::\n:::\n\n\n## Generic and Specialty Pharmaceuticals\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#|code-fold: true\n\n# Split the Teva data\nsplit_fr = 0.8\ncut=int(split_fr*x_teva.shape[0])\ntt_teva=t_teva[0:cut]; xt_teva=x_teva[0:cut]\ntv_teva=t_teva[cut:]; xv_teva=x_teva[cut:]\n\n# Plot the split Teva data\nfig, ax = plt.subplots()\nfor i in range(0,x_teva.shape[1]):\n    ax.plot(tt_teva, xt_teva[:,i],'ro',alpha=0.25)\n    ax.plot(tt_teva, xt_teva[:,i],\"g-\")\nfor i in range(0,x_teva.shape[1]):\n    ax.plot(tv_teva, xv_teva[:,i],'bo',alpha=0.25)\n    ax.plot(tv_teva, xv_teva[:,i],\"g-\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](dl_time_series_files/figure-html/unnamed-chunk-8-11.png){width=672}\n:::\n:::\n\n\n:::\n\n## Mini-Batching\n\n:::panel-tabset\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n# RNN\n\n# LSTM\n\n# GRU\n\n# Discussion on Neural Networks\n",
    "supporting": [
      "dl_time_series_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}