---
title: "Multivariate TS Models (ARIMAX/SARIMAX/VAR)"
---

```{r setup, include=FALSE}
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(gridExtra)          
library(zoo)
library(readxl)
library(seasonal)
library(vars)
library(imputeTS)
```

```{r load_data, warning=FALSE, message=FALSE}
#| code-fold: true

# # Get the covid data
# covid <- read_csv("data/COVID_usa_Vacc_new.csv")
# 
# covid <- covid %>% 
#   dplyr::select(date, new_cases, new_vaccinations)
# 
# covid$date <- as.Date(covid$date, format = "%Y-%m-%d")
# covid$new_cases <- as.double(covid$new_cases)
# covid$new_vaccacination <- as.double(covid$new_vaccinations)
# 
# #replace 0's with nas
# covid$new_cases[covid$new_cases==0] = NA
# covid$new_vaccinations[covid$new_vaccinations==0] = NA
# 
# #Missing Value Imputation by Last Observation Carried Forward
# 
# covid[,"new_cases"] = na_locf(covid[,"new_cases"],option = 'locf',na_remaining="rev")
# covid[,"new_vaccinations"] = na_locf(covid[,"new_vaccinations"],option = 'locf',na_remaining="rev")
# covid = covid[, c('date', 'new_cases', 'new_vaccinations')]
# health_unique <- health[!duplicated(health$date), ]
# covid_unique <- covid[!duplicated(covid$date), ]
# health_stock_covid <- merge(health_unique, covid_unique, by = "date")
# 
# # Import data of Public Health Outcomes
# # Average Life Expectancy
# average_life_expectancy <- read_xlsx("data/life_expectancy_7countries_2000_2022.xlsx")
# # Change it to long format
# average_life_expectancy <- average_life_expectancy %>% 
#   pivot_longer(cols = -Year, 
#                names_to = "Country", 
#                values_to = "Life_Expectancy")
# 
# average_life_expectancy$Year <- as.Date(paste(average_life_expectancy$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# average_life_expectancy$Life_Expectancy <- as.double(average_life_expectancy$Life_Expectancy)
# 
# # Filter to only include the US
# average_life_expectancy <- average_life_expectancy %>% 
#   filter(Country == "United States")
# 
# ale_ts <- ts(average_life_expectancy$Life_Expectancy, start = c(year(min(average_life_expectancy$Year)), month(min(average_life_expectancy$Year))), end = c(year(max(average_life_expectancy$Year)), month(max(average_life_expectancy$Year))), frequency = 1) # Yearly data
# 
# # Importing the dataset of deaths due to major diseases
# death_cancer <- read_xlsx("data/deaths_cancer_us_1950_2019.xlsx")
# death_heart <- read_xlsx("data/deaths_heart_diseases_us_1950_2019.xlsx")
# death_diabetes <- read_xlsx("data/deaths_diabetes_us_1950_2019.xlsx")
# 
# # Merge these three datasets
# death_major_diseases <- merge(death_cancer, death_heart, by = "Year")
# death_major_diseases <- merge(death_major_diseases, death_diabetes, by = "Year")
# 
# # Create a new column for total deaths
# death_major_diseases$Total_Deaths <- death_major_diseases$Death_Cancer + death_major_diseases$Death_Heart_Disease + death_major_diseases$Death_Diabetes
# 
# # Change Date format
# death_major_diseases$Year <- as.Date(paste(death_major_diseases$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# death_major_diseases$Death_Cancer <- as.double(death_major_diseases$Death_Cancer)
# death_major_diseases$Death_Heart_Disease <- as.double(death_major_diseases$Death_Heart_Disease)
# death_major_diseases$Death_Diabetes <- as.double(death_major_diseases$Death_Diabetes)
# 
# 
# major_diseases_ts <- ts(death_major_diseases$Total_Deaths, start = c(year(min(death_major_diseases$Year)), month(min(death_major_diseases$Year))), end = c(year(max(death_major_diseases$Year)), month(max(death_major_diseases$Year))), frequency = 1) # Yearly data
# 
# # Importing the dataset of infant mortality rates
# infant_mortality <- read_xlsx("data/infant_mortality_rate_us_1990_2021.xlsx")
# 
# # Change Date format
# infant_mortality$Year <- as.Date(paste(infant_mortality$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# infant_mortality$Infant_Mortality_Rates <- as.double(infant_mortality$Infant_Mortality_Rates)
# 
# # Create time series
# infant_mortality_ts <- ts(infant_mortality$Infant_Mortality_Rates, start = c(year(min(infant_mortality$Year)), month(min(infant_mortality$Year))), end = c(year(max(infant_mortality$Year)), month(max(infant_mortality$Year))), frequency = 1) # Yearly data
# 
# # Importing the dataset of share of people without health insurance
# health_insurance <- read_xlsx("data/share_of_people_us_without_health_insurance_age_1997_2022.xlsx")
# 
# # Change Date format
# health_insurance$Year <- as.Date(paste(health_insurance$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# 
# # Change it to long format
# health_insurance <- health_insurance %>% 
#   pivot_longer(cols = -Year, 
#                names_to = "Age_Group", 
#                values_to = "Percentage")
# 
# # Filter to all ages 
# health_insurance <- health_insurance %>% 
#   filter(Age_Group == "All ages")
# 
# # Create time series
# health_insurance_ts <- ts(health_insurance$Percentage, start = c(year(min(health_insurance$Year)), month(min(health_insurance$Year))), end = c(year(max(health_insurance$Year)), month(max(health_insurance$Year))), frequency = 1) # Yearly data
# 
# # Importing the dataset of emergency room visits
# emergency_room <- read_xlsx("data/us_emergency_room_visits_1997_2019_by_age.xlsx")
# 
# # Change it to long format
# emergency_room <- emergency_room %>% 
#   pivot_longer(cols = -Year, 
#                names_to = "Age_Group", 
#                values_to = "Visits_Percent")
# 
# # Change Date format
# emergency_room$Year <- as.Date(paste(emergency_room$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# 
# # Get the average visits percentage for all ages
# emergency_room <- emergency_room %>% 
#   group_by(Year) %>%
#   summarise(Average_Visits_Percent = mean(Visits_Percent))
# 
# # Create time series
# emergency_room_ts <- ts(emergency_room$Average_Visits_Percent, start = c(year(min(emergency_room$Year)), month(min(emergency_room$Year))), end = c(year(max(emergency_room$Year)), month(max(emergency_room$Year))), frequency = 1)
# 
# # Importing the dataset of prescription drug expenditure
# prescription_drug <- read_xlsx("data/prescription_drug_expenditure_us_1960_2022.xlsx")
# 
# # Change Date format
# prescription_drug$Year <- as.Date(paste(prescription_drug$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# 
# # Create time series
# prescription_drug_ts <- ts(prescription_drug$Expenditure, start = c(year(min(prescription_drug$Year)), month(min(prescription_drug$Year))), end = c(year(max(prescription_drug$Year)), month(max(prescription_drug$Year))), frequency = 1)
# 
# # Importing the dataset of GDP by industry
# gdp_industry <- read_csv("data/GDP_by_Industry.csv", skip = 4) %>%
#   dplyr::select(-Line)
# 
# colnames(gdp_industry) <- c("Industry", "2018-Q1", "2018-Q2", "2018-Q3", "2018-Q4", "2019-Q1", "2019-Q2", "2019-Q3", "2019-Q4", "2020-Q1", "2020-Q2", "2020-Q3", "2020-Q4", "2021-Q1", "2021-Q2", "2021-Q3", "2021-Q4", "2022-Q1", "2022-Q2", "2022-Q3", "2022-Q4", "2023-Q1", "2023-Q2", "2023-Q3")
# 
# gdp_healthcare <- gdp_industry %>%
#   filter(
#            (Industry == "Health care and social assistance")
#   )
# 
# ## Change it to long format
# gdp_healthcare <- gdp_healthcare %>%
#   pivot_longer(cols = -Industry, 
#                names_to = "Date", 
#                values_to = "GDP")
# 
# # Change date to Date format
# gdp_healthcare$Date <- as.yearqtr(gdp_healthcare$Date, format = "%Y-Q%q")
# 
# gdp_healthcare$Date <- as.Date(gdp_healthcare$Date)
# gdp_healthcare$GDP <- as.double(gdp_healthcare$GDP)
# 
# gdp_healthcare <- gdp_healthcare %>%
#   mutate(
#     year = year(Date)
#   )
# 
# # Create time series
# gdp_healthcare_ts <- ts(gdp_healthcare$GDP, start = c(year(min(gdp_healthcare$Date))), end = c(year(max(gdp_healthcare$Date))), frequency = 4) # Quarterly data
# 
# # Importing the dataset of number of adult smokers
# adult_smokers <- read_xlsx("data/number_of_adult_smokers_us_1965_2021.xlsx")
# 
# # Change Date format
# adult_smokers$Year <- as.Date(paste(adult_smokers$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# 
# # Create time series
# adult_smokers_ts <- ts(adult_smokers$Number, start = c(year(min(adult_smokers$Year)), month(min(adult_smokers$Year))), end = c(year(max(adult_smokers$Year)), month(max(adult_smokers$Year))), frequency = 1)
# 
# # Importing the dataset of per capita alcohol consumption
# alcohol_consumption <- read_xlsx("data/per_capita_alcohol_consumption_of_all_beverages_us_1850_2021.xlsx")
# 
# # Change Date format
# alcohol_consumption$Year <- as.Date(paste(alcohol_consumption$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
# 
# # Create time series
# alcohol_consumption_ts <- ts(alcohol_consumption$Consumption, start = c(year(min(alcohol_consumption$Year)), month(min(alcohol_consumption$Year))), end = c(year(max(alcohol_consumption$Year)), month(max(alcohol_consumption$Year))), frequency = 1)

```

# Key Questions and Model Equations:

1.  What's the relationship between different parts of the Healthcare Industry? (Yousaf, Pham, & Goodwill, 2023)

-   **(VAR) Pfizer Stock \~ Vertex stock + TEVA stock + SAGE stock**

2.  How the lifestyle influences the mortality rates of major diseases?

-   **(VAR) Mortality rates of major disease(Cancer, Heart Disease, Diabetes) \~ Smoking Prevalance + Alcohol Consumption**

3.  How the average life expectancy of the US be influenced by the mortality rates of Cancer, Heart Diseases, Diabetes, and infant mortality rates? (Adu, Appiahene, Afrifa, 2023)

-   **(ARIMAX) Average Life Expectancy \~ Mortality rates of major disease(Cancer, Heart Diseases, Diabetes) + Infant Mortality rates**

4.  Will the US Average Life Expectancy Increase with Prescription Drug Expenditure?

-   **(VAR) Average Life Expectancy \~ Prescription Drug Expenditure**

5.  How Public Health Crisis(Covid-19) influences the financial market of Healthcare **(Still have two parts to finish)**

-   **(ARIMAX) Pfizer Stock \~ Vertex stock + TEVA stock + SAGE stock + Covid-19 Cases**

# 1. Relationship between different parts of the Healthcare Industry

**(VAR)Pfizer stock \~ Vertex stock + Teva stock + SAGE stock**

We chose these stocks because they can each represent different pharmaceutical companies. Pfizer is a large pharmaceutical company, Vertex is a biotech company, Teva is a drug company, and SAGE is a small biotech company. They play different roles in the pharmaceutical industry, and **Pfizer was chosen as our primary research subject** because it made the COVID-19 vaccines. It has substantial market cap and prominent role in pharmaceuticals.

::: panel-tabset
```{r data_load_1}
#| code-fold: true
#| code-summary: Data Collection


# Import Stock Price data
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)

tickers = c("PFE", "VRTX", "TEVA", "SAGE")

for (i in tickers){
  getSymbols(i,
             from = "2020-01-04",
             to = "2024-02-02")}

x <- list(
  title = "date"
)
y <- list(
  title = "value"
)

stock <- data.frame(PFE$PFE.Adjusted,
                    VRTX$VRTX.Adjusted,
                    TEVA$TEVA.Adjusted,
                    SAGE$SAGE.Adjusted)


stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append(tickers,'Dates')

stock <- stock %>%
  rownames_to_column(var = "date")

stock$date<-as.Date(stock$Dates,"%Y-%m-%d")


pharma_ts <- ts(stock$PFE, start = c(year(min(stock$date)), month(min(stock$date))), end = c(year(max(stock$date)), month(max(stock$date))), frequency = 365)

biotech_ts <- ts(stock$VRTX, start = c(year(min(stock$date)), month(min(stock$date))), end = c(year(max(stock$date)), month(max(stock$date))), frequency = 365)

drug_ts <- ts(stock$TEVA, start = c(year(min(stock$date)), month(min(stock$date))), end = c(year(max(stock$date)), month(max(stock$date))), frequency = 365)

small_biotech_ts <- ts(stock$SAGE, start = c(year(min(stock$date)), month(min(stock$date))), end = c(year(max(stock$date)), month(max(stock$date))), frequency = 365)
```

## Data Visualization

**Pfizer (PFE)** shows a generally positive trend over a long period with some volatility, indicating periods of growth and market confidence, reflecting successful product launches(vaccine). **Vertex Pharmaceuticals (VRTX)** shows steady growth over time, but a huge drop in 2022. **Teva Pharmaceutical(TEVA)**shows a peak followed by a decline and then a period of stable with volatility. **Sage Therapeutics (SAGE)**, as a smaller biotech company, it shows significant volatility, which is typical for such firms. Spikes in the stock price might correspond to positive news about drug trials or FDA approvals, while declines may indicate setbacks in development or other challenges.

```{r dv_1, message=FALSE, warning=FALSE}
#| code-fold: true


stock_ts <- cbind(pharma_ts, biotech_ts, drug_ts, small_biotech_ts)
colnames(stock_ts) <- c("pharma", "biotech", "drug", "small_biotech")

autoplot(stock_ts)
```

## VARselect

As we can see from the results, the p recommended by VARselect() are 10 and 1.

```{r varselect_1, message=FALSE, warning=FALSE}
#| code-fold: true


VARselect(stock_ts, lag.max=10, type="both")
```

## Initial Model Selection

As we can see from the results, VAR(1) model is better than VAR(10) model, based on the residual errors and significance of the coefficients. What's more, except small-biotech stock, all the other stocks are correlated with each other.

```{r var_model, message=FALSE, warning=FALSE}
#| code-fold: true


summary(fitvar1<-vars::VAR(stock_ts, p=10, type='both'))
summary(fitvar2<-vars::VAR(stock_ts, p=1, type='both'))
```

## Cross-validation

After doing the cross-validation test, we can see that the VAR(1) model has a better performance than the VAR(10) model, which is consistent with the initial model selection.

```{r cv_1, message=FALSE, warning=FALSE}
#| code-fold: true

folds = 5 
best_model <- NULL
best_performance <- Inf 

fold_s <- floor(nrow(stock_ts)/folds)

yr = rep(c(2020:2024),each =365) #year

rmse1 = data.frame()
rmse2 = data.frame()

for(fold in 1:folds){
  start <- (fold-1)*fold_s+1
  end <- fold*fold_s
  
  train_model <- stock_ts[-(start:end), ]
  test_model <- stock_ts[start:end, ]
  
  sel <- VARselect(train_model, lag.max = 10, type = "both")
  best_lag <- sel$selection[1]
  
  # Define the fit models
  fit <- vars::VAR(train_model, p=10, type= "both", season = NULL, exog = NULL)
  fit2 <- vars::VAR(train_model, p=1, type= "both", season = NULL, exog = NULL)
  
  h <- nrow(test_model)
  
  # Define the prediction
  pred <- predict(fit, n.ahead = h)
  pred2 <- predict(fit2, n.ahead = h)
  
  pred_pfe <- pred$fcst$pharma[,1]
  pred_pfe2 <- pred2$fcst$pharma[,1]
  
  mse <- mean((pred_pfe - test_model[, "pharma"])^2)
  mse2 <- mean((pred_pfe2 - test_model[, "pharma"])^2)
  
  rmse1 <- rbind(rmse1, data.frame(pharma = sqrt(mse)))
  rmse2 <- rbind(rmse2, data.frame(pharma = sqrt(mse2)))
  
  if(mse < best_performance){
    best_model <- fit
    best_performance <- mse
  } else if(mse2 < best_performance){
    best_model <- fit2
    best_performance <- mse2
  }

}

# Plot the RMSE of two models

plot(rmse1$pharma, type = "l", col = "blue", xlab = "Fold", ylab = "RMSE", main = "RMSE of VAR(10) and VAR(1)")
lines(rmse2$pharma, col = "red")
legend("topright", legend = c("VAR(10)", "VAR(1)"), col = c("blue", "red"), lty = 1)
```

## Model Creation and Diagnostics

The models are created using the VAR(10) and VAR(1) models, and the serial correlation test is performed. The results show that the residuals are not serially correlated, which is a good sign. What's more, the plots show that the residuals are normally distributed. Last but not least, VAR(1) has a much lower p-value than VAR(10).

```{r model_1, message=FALSE, warning=FALSE}
#| code-fold: true

var_model_1 <- vars::VAR(stock_ts, p=10, type= "both", season = NULL, exog = NULL)
stock.serial <- serial.test(var_model_1, lags.pt = 12, type = "PT.asymptotic") 
stock.serial

plot(stock.serial, names = "pharma", mar = c(2,2,2,2)) 
plot(stock.serial, names = "biotech", mar = c(2,2,2,2))
plot(stock.serial, names = "drug", mar = c(2,2,2,2))
plot(stock.serial, names = "small_biotech", mar = c(2,2,2,2))

var_model_2 <- vars::VAR(stock_ts, p=1, type= "both", season = NULL, exog = NULL)
stock_2.serial <- serial.test(var_model_2, lags.pt = 12, type = "PT.asymptotic") 
stock_2.serial

plot(stock_2.serial, names = "pharma", mar = c(2,2,2,2)) 
plot(stock_2.serial, names = "biotech", mar = c(2,2,2,2))
plot(stock_2.serial, names = "drug", mar = c(2,2,2,2))
plot(stock_2.serial, names = "small_biotech", mar = c(2,2,2,2))
```

## Forecasting

The Pfizer (pharma) fan chart shows a first increase then decrease trend with more significant fluctuation in the forecasted period, suggesting higher volatility or uncertainty in its future stock price. On the other hand, Vertex (biotech) demonstrates a first increase then a little decrease trend with less forecasted variance, which may indicate market confidence in its stability. Teva (drug) shows a first little decrease then increase trend with some level of volatility, though not as pronounced as Pfizer, which could reflect a moderate level of uncertainty in its market dynamics. Lastly, SAGE (small_biotech) exhibits small increase trend with greater uncertainty, which is typical for smaller biotech companies that may have high growth potential but also higher risks due to factors such as funding, clinical trial outcomes, and regulatory approvals. For the relationships between these segments, the forecasted stock prices of Pfizer and Vertex are positively correlated, while the stock prices of Teva and SAGE are negatively correlated.

```{r forecast_1, message=FALSE, warning=FALSE}
#| code-fold: true

(fit.pr = predict(fitvar2, n.ahead = 365, ci = 0.95))
fanchart(fit.pr, mar = c(2,2,2,2))

```
:::

# 2. How the lifestyle influences the mortality rates of major diseases?

Lifestyle factors such as smoking prevalence and alcohol consumption are significant determinants of mortality rates from major diseases like cancer, heart disease, and diabetes. Smoking is a well-known risk factor for many types of cancer and cardiovascular diseases, and it exacerbates the complications associated with diabetes. Similarly, excessive alcohol consumption is linked to a range of health issues, including liver diseases, cardiovascular problems, and certain cancers. A `VAR` model incorporating these lifestyle variables could reveal the extent to which changes in smoking and drinking behaviors might predict fluctuations in mortality rates from these diseases, reflecting the impact of public health interventions and societal shifts in behavior.

**(VAR) Mortality rates of major disease(Cancer, Heart Disease, Diabetes) \~ Smoking Prevalance + Alcohol Consumption**

::: panel-tabset
```{r data_load_2}
#| code-fold: true
#| code-summary: Data Dollection

# Importing the dataset of deaths due to major diseases
death_cancer <- read_xlsx("data/deaths_cancer_us_1950_2019.xlsx")
death_heart <- read_xlsx("data/deaths_heart_diseases_us_1950_2019.xlsx")
death_diabetes <- read_xlsx("data/deaths_diabetes_us_1950_2019.xlsx")

# Merge these three datasets
death_major_diseases <- merge(death_cancer, death_heart, by = "Year")
death_major_diseases <- merge(death_major_diseases, death_diabetes, by = "Year")

# Create a new column for total deaths
death_major_diseases$Total_Deaths <- death_major_diseases$Death_Cancer + death_major_diseases$Death_Heart_Disease + death_major_diseases$Death_Diabetes

# Change Date format
death_major_diseases$Year <- as.Date(paste(death_major_diseases$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
death_major_diseases$Death_Cancer <- as.double(death_major_diseases$Death_Cancer)
death_major_diseases$Death_Heart_Disease <- as.double(death_major_diseases$Death_Heart_Disease)
death_major_diseases$Death_Diabetes <- as.double(death_major_diseases$Death_Diabetes)

# Importing the dataset of number of adult smokers
adult_smokers <- read_xlsx("data/number_of_adult_smokers_us_1965_2021.xlsx")
colnames(adult_smokers) <- c("Year", "Num_Adult_Smokers")

# Change Date format
adult_smokers$Year <- as.Date(paste(adult_smokers$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")

# Importing the dataset of per capita alcohol consumption
alcohol_consumption <- read_xlsx("data/per_capita_alcohol_consumption_of_all_beverages_us_1850_2021.xlsx")
colnames(alcohol_consumption) <- c("Year", "Alcohol_Consumption")

# Change Date format
alcohol_consumption$Year <- as.Date(paste(alcohol_consumption$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")

# Merge the three datasets
lifestyle_mortality <- merge(death_major_diseases, adult_smokers, by = "Year")
lifestyle_mortality <- merge(lifestyle_mortality, alcohol_consumption, by = "Year")
```

## Data Visualization

The top panel shows a declining trend in total deaths of major diseases, suggesting improvements in healthcare or effective disease prevention and management strategies over time.The middle panel indicates a steady decline in adult smoking rates, which historically correlates with public health initiatives and smoking cessation programs. This trend is consistent with the falling mortality rates, supporting the view that reduced smoking prevalence can lead to lower mortality from smoking-related diseases. The bottom panel shows alcohol consumption, which seems relatively stable with slight fluctuations. The stability in alcohol consumption, juxtaposed against declining mortality rates, might imply that alcohol may not be as significant a factor in the total mortality rate from these major diseases as smoking, or it may suggest that the effects of alcohol consumption on mortality may be more complex and influenced by other factors such as drinking patterns or socioeconomic status.

```{r data_visualization_2}
#| code-fold: true

lifestyle_mortality_ts <- ts(lifestyle_mortality[,c(5:7)], start=c(1970), end=c(2019), frequency=1)

autoplot(lifestyle_mortality_ts[,c(1:3)], facets=TRUE, color="#27aeef") +
  xlab("Year") + ylab("") + theme_bw() +
  ggtitle("Variables Influencing the Total Mortality Rates of Major Diseases")
```

## VARselect

Based on the VARselect function, the optimal p for VAR(p) is 6.

```{r var_select_2}
#| code-fold: true

VARselect(lifestyle_mortality_ts, lag.max=6, type="both")
```

## Initial Model Selection

We run the VAR() model with p = 6.

```{r var_model_2, message=FALSE, warning=FALSE}
#| code-fold: true

summary(fitvar3<-vars::VAR(lifestyle_mortality_ts, p=6, type='both'))
```

## Cross-Validation

We use cross-validation to compare two models: VAR(6) and VAR(5). And the best model which is selected by the cross-validation process is `VAR(6)`.

```{r cross_validation_2, message=FALSE, warning=FALSE}
#| code-fold: true

## Cross-validation

folds = 5 
best_model <- NULL
best_performance <- Inf 

fold_s <- floor(nrow(lifestyle_mortality_ts)/folds)

yr = rep(c(1970:2019),each =1) #year

rmse1 = data.frame()
rmse2 = data.frame()

for(fold in 1:folds){
  start <- (fold-1)*fold_s+1
  end <- fold*fold_s
  
  train_model <- lifestyle_mortality_ts[-(start:end), ]
  test_model <- lifestyle_mortality_ts[start:end, ]
  
  sel <- VARselect(train_model, lag.max = 6, type = "both")
  best_lag <- sel$selection[1]
  
  # Define the fit models
  fit <- vars::VAR(train_model, p=6, type= "both", season = NULL, exog = NULL)
  fit2 <- vars::VAR(train_model, p=5, type= "both", season = NULL, exog = NULL)
  
  h <- nrow(test_model)
  
  # Define the prediction
  pred <- predict(fit, n.ahead = h)
  pred2 <- predict(fit2, n.ahead = h)
  
  pred_deaths <- pred$fcst$Total_Deaths[,1]
  pred_deaths2 <- pred2$fcst$Total_Deaths[,1]
  
  mse <- mean((pred_deaths - test_model[, "Total_Deaths"])^2)
  mse2 <- mean((pred_deaths2 - test_model[, "Total_Deaths"])^2)
  
  rmse1 <- rbind(rmse1, data.frame(Total_Deaths = sqrt(mse)))
  rmse2 <- rbind(rmse2, data.frame(Total_Deaths = sqrt(mse2)))
  
  if(mse < best_performance){
    best_model <- fit
    best_performance <- mse
  } else if(mse2 < best_performance){
    best_model <- fit2
    best_performance <- mse2
  }

}

# Plot the RMSE of two models

plot(rmse1$Total_Deaths, type = "l", col = "blue", xlab = "Fold", ylab = "RMSE", main = "RMSE of VAR(6) and VAR(5)")
lines(rmse2$Total_Deaths, col = "red")
legend("topright", legend = c("VAR(6)", "VAR(5)"), col = c("blue", "red"), lty = 1)
```

## Model Creation and Diagnostics

The models VAR(6) and VAR(5) are created. The serial correlation test is performed on both models. The results show that the VAR(6) model has a lower p-value, indicating that the residuals are not serially correlated. Based on the p-value and ACF plots, the VAR(6) model is selected as the final model.

```{r model_creation_2}
#| code-fold: true

var_model_3 <- vars::VAR(lifestyle_mortality_ts, p=6, type= "both", season = NULL, exog = NULL)
lm.serial <- serial.test(var_model_3, lags.pt = 12, type = "PT.asymptotic") 
lm.serial

plot(lm.serial, names = "Total_Deaths", mar = c(2,2,2,2)) 
plot(lm.serial, names = "Num_Adult_Smokers", mar = c(2,2,2,2))
plot(lm.serial, names = "Alcohol_Consumption", mar = c(2,2,2,2))

var_model_4 <- vars::VAR(lifestyle_mortality_ts, p=5, type= "both", season = NULL, exog = NULL)
lm.serial2 <- serial.test(var_model_4, lags.pt = 12, type = "PT.asymptotic")
lm.serial2

plot(lm.serial2, names = "Total_Deaths", mar = c(2,2,2,2))
plot(lm.serial2, names = "Num_Adult_Smokers", mar = c(2,2,2,2))
plot(lm.serial2, names = "Alcohol_Consumption", mar = c(2,2,2,2))


```

## Forecasting

`Total Major Diseases Deaths` show a first increasing then decreasing trend, indicating an expectation of decline but with some uncertainty. The `Number of Adult Smokers` shows an increase trend, then decrease. The `Alcohol Consumption` shows a small increase, and then a huge decrease.

```{r forecast_2}
#| code-fold: true

## Forecasting

(fit.pr = predict(fitvar3, n.ahead = 5, ci = 0.95))
fanchart(fit.pr, mar = c(2,2,2,2))

```
:::

# 3. How the average life expectancy of the US be influenced by the mortality rates of Cancer, Heart Diseases, Diabetes, and infant mortality rates?

The average life expectancy in the U.S. could be influenced by the mortality rates of major diseases like Cancer, Heart Diseases, and Diabetes, as well as infant mortality rates, because these are significant indicators of overall population health. If mortality rates from these diseases decrease due to better healthcare, prevention, and treatment, life expectancy is likely to increase. `An ARIMAX model` that incorporates these mortality rates as exogenous variables would allow for an assessment of how changes in these rates could impact average life expectancy. The inclusion of infant mortality rates accounts for early-life factors, which are crucial determinants of life expectancy trends.

**(ARIMAX) Average Life Expectancy \~ Mortality rates of major disease(Cancer, Heart Diseases, Diabetes) + Infant Mortality rates**

::: panel-tabset
```{r data_load_3}
#| code-fold: true

# Average Life Expectancy
average_life_expectancy <- read_xlsx("data/life_expectancy_7countries_2000_2022.xlsx")
# Change it to long format
average_life_expectancy <- average_life_expectancy %>%
  pivot_longer(cols = -Year,
               names_to = "Country",
               values_to = "Life_Expectancy")

average_life_expectancy$Year <- as.Date(paste(average_life_expectancy$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
average_life_expectancy$Life_Expectancy <- as.double(average_life_expectancy$Life_Expectancy)

# Filter to only include the US
average_life_expectancy <- average_life_expectancy %>%
  filter(Country == "United States")

# Importing the dataset of deaths due to major diseases
# Have already imported this dataset in the previous question

# Importing the dataset of infant mortality rates
infant_mortality <- read_xlsx("data/infant_mortality_rate_us_1990_2021.xlsx")

# Change Date format
infant_mortality$Year <- as.Date(paste(infant_mortality$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
infant_mortality$Infant_Mortality_Rates <- as.double(infant_mortality$Infant_Mortality_Rates)

# Merge the three datasets
life_expectancy_mortality <- merge(average_life_expectancy, death_major_diseases, by = "Year")
life_expectancy_mortality <- merge(life_expectancy_mortality, infant_mortality, by = "Year")

# Drop the total deaths column
life_expectancy_mortality <- life_expectancy_mortality[, -c(2, 7)]
```

## Data Visualization

As illustrated by the plots, average life expectancy shows an upward trend, which is typically a sign of improving overall health and healthcare in a population. Concurrently, mortality rates from cancer, heart disease, and diabetes are declining, which could be a contributing factor to increasing life expectancy. Similarly, the declining trend in infant mortality rates is another positive indicator, as lower infant mortality is directly related to higher life expectancy.

```{r data_visualization_3}
#| code-fold: true

life_expectancy_mortality_ts <- ts(life_expectancy_mortality[,c(2:6)], start=c(2000), end=c(2019), frequency=1)

autoplot(life_expectancy_mortality_ts, facets=TRUE, color="#27aeef") +
  xlab("Year") + ylab("") + theme_bw() +
  ggtitle("Variables Influencing the Average Life Expectancy")

```

## Auto ARIMA

Based on the results we got, we can see the `Auto ARIMA` function select the model ARMA(2,0). And the residuals are not correlated.

```{r auto_arima_3}
#| code-fold: true

xreg <- cbind(
  life_expectancy_mortality_ts[, "Death_Cancer"],
  life_expectancy_mortality_ts[, "Death_Heart_Disease"],
  life_expectancy_mortality_ts[, "Death_Diabetes"],
  life_expectancy_mortality_ts[, "Infant_Mortality_Rates"]
)

fit_expectancy_mortality <- auto.arima(life_expectancy_mortality_ts[, "Life_Expectancy"], xreg = xreg)
summary(fit_expectancy_mortality)

# Check residuals
checkresiduals(fit_expectancy_mortality)

```

## Manual Model Fitting

Firstly, we fit the regression model of Life Expectancy on the mortality rates of major diseases and infant mortality rates. The model shows that the mortality rates of cancer, heart disease, and diabetes are significant predictors of life expectancy. Then we take the residuals of this model and fit several ARIMA models to them. We'll choose the best ARIMA model based on the AIC and BIC values. As we can see from the results, the best ARIMA models are `ARMA(2,2)`, and `ARMA(2,1)`.

```{r model_fitting_3}
#| code-fold: true

# Change the dataset to time series
life_expectancy_mortality$Life_Expectancy <- ts(life_expectancy_mortality$Life_Expectancy, start=c(2000), end=c(2019), frequency=1)
life_expectancy_mortality$Death_Cancer <- ts(life_expectancy_mortality$Death_Cancer, start=c(2000), end=c(2019), frequency=1)
life_expectancy_mortality$Death_Heart_Disease <- ts(life_expectancy_mortality$Death_Heart_Disease, start=c(2000), end=c(2019), frequency=1)
life_expectancy_mortality$Death_Diabetes <- ts(life_expectancy_mortality$Death_Diabetes, start=c(2000), end=c(2019), frequency=1)
life_expectancy_mortality$Infant_Mortality_Rates <- ts(life_expectancy_mortality$Infant_Mortality_Rates, start=c(2000), end=c(2019), frequency=1)

############# First fit the linear model##########
fit.reg_expectancy_mortality <- lm(Life_Expectancy ~ Death_Cancer + Death_Heart_Disease + Death_Diabetes + Infant_Mortality_Rates, data = life_expectancy_mortality)

summary(fit.reg_expectancy_mortality)

## Residual Fit
res.fit_em <- ts(residuals(fit.reg_expectancy_mortality), star=decimal_date(as.Date("2000-01-01",format = "%Y-%m-%d")),frequency = 1)

ggAcf(res.fit_em, lag.max = 30) # q=1,2,3
ggPacf(res.fit_em, lag.max = 30) # p=1,2

# We don't need differencing as the data is already stationary

# Manual Fitting the models
d=0
i=1
temp= data.frame()
ls=matrix(rep(NA,6*25),nrow=25) # roughly nrow = 5x2 (see below)


for (p in 0:3)# p=0,1,2,3 : 4
{
  for(q in 0:3)# q=0,1,2,3 :4
  {
    model<- Arima(res.fit_em, order=c(p,d,q),include.drift=TRUE) 
    ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
    i=i+1
  }
}

output= as.data.frame(ls)
names(output)= c("p","d","q","AIC","BIC","AICc")

#temp
knitr::kable(output)

#output
output[which.min(output$AIC),] 
output[which.min(output$BIC),]
output[which.min(output$AICc),]
```

## Best Models Residuals

Here, we do the model diagnostics for the best models we got from the manual fitting. The best models are `ARMA(2,2)` and `ARMA(2,1)`. From the results, we can say `ARMA(2,1)` is the better model. Let's move to the cross-validation step to find which model is better to forecast.

```{r best_model_residuals_3}
#| code-fold: true

capture.output(sarima(res.fit_em, 2,0,2)) 

capture.output(sarima(res.fit_em, 2,0,1))
```

## Cross-Validation

Based on the results of cross-validation, we can see that the `ARMA(2,1)` model has a lower RMSE value compared to the ARMA(2,2) model in most of the time. Therefore, we can say that the ARMA(2,1) model is the better model to forecast.

```{r cross_validation_3, warning=FALSE}
#| code-fold: true

n <- length(res.fit_em)
k <- 3  # Assuming 5 is the maximum number of observations for testing

rmse1 <- matrix(NA, 8)
rmse2 <- matrix(NA, 8)

st <- tsp(res.fit_em)[1] + (k - 1)

for (i in 1:8) {
  # Define the training set
  train_end <- st + i - 1
  xtrain <- window(res.fit_em, end = train_end)

  # Define the testing set
  test_start <- train_end + 1
  test_end <- min(st + i, tsp(res.fit_em)[2])
  xtest <- window(res.fit_em, start = test_start, end = test_end)

  fit <- Arima(xtrain, order = c(2, 0, 2), include.drift = TRUE, method = "ML")
  fcast <- forecast(fit, h = 4)

  fit2 <- Arima(xtrain, order = c(2, 0, 1), include.drift = TRUE, method = "ML")
  fcast2 <- forecast(fit2, h = 4)

  rmse1[i] <- sqrt((fcast$mean - xtest)^2)
  rmse2[i] <- sqrt((fcast2$mean - xtest)^2)
}

plot(1:8, rmse2, type = "l", col = 2, xlab = "horizon", ylab = "RMSE")
lines(1:8, rmse1, type = "l", col = 3)
legend("topleft", legend = c("fit2", "fit1"), col = 2:3, lty = 1)
```

## Forecasting

The forecast, with ARMA(2,1) error terms, indicates that average life expectancy in the US is expected to continue increasing, but with a degree of uncertainty, as represented by the widening confidence intervals. This suggests optimism about future health outcomes. As we can see, the death rates due to cancer, heart disease, and diabetes are decreasing, and the infant mortality rate is also decreasing, which could be reasons for the increase in life expectancy. What's more, we can find from Question 2 that the number of smokers and the alcohol consumption rate are decreasing, which could also increase the life expectancy in the US. Meanwhile, we can see a decrease of average life expectancy around 2020, which could be due to the COVID-19 pandemic.

```{r forecast_3, warning=FALSE}
#| code-fold: true

fit_em <- Arima(life_expectancy_mortality_ts[, "Life_Expectancy"], order=c(2,0,1), xreg = life_expectancy_mortality_ts[, c('Death_Cancer', 'Death_Heart_Disease', 'Death_Diabetes', 'Infant_Mortality_Rates')])

summary(fit_em)

cancer_fit <- auto.arima(life_expectancy_mortality_ts[, "Death_Cancer"]) 
ft <- forecast(cancer_fit)

heart_disease_fit <- auto.arima(life_expectancy_mortality_ts[, "Death_Heart_Disease"])
ft2 <- forecast(heart_disease_fit)

diabetes_fit <- auto.arima(life_expectancy_mortality_ts[, "Death_Diabetes"])
ft3 <- forecast(diabetes_fit)

infant_mortality_fit <- auto.arima(life_expectancy_mortality_ts[, "Infant_Mortality_Rates"])
ft4 <- forecast(infant_mortality_fit)

xreg = cbind(Cancer = ft$mean,
             Heart_Disease = ft2$mean,
             Diabetes = ft3$mean,
             Infant_Mortality = ft4$mean)

fcast <- forecast(fit_em, xreg=xreg)
autoplot(fcast) + xlab("Year") +
  ylab("Average Life Expectancy")
```
:::

# 4. Will the US Average Life Expectancy Increase with Prescription Drug Expenditure?

There were previous research studies that showed the more rapid adoption of new drugs has substantial benefits in the form of increased life expectancy, higher productivity and lower non-drug health care expenditure **(Baker, & Fugh-Berman, 2009)**. In this section, we will investigate the relationship between the average life expectancy in the US and the prescription drug expenditure.

-   **(VAR) Average Life Expectancy \~ Prescription Drug Expenditure**

::: panel-tabset
```{r data_load_4}
#| code-fold: true

# Importing the dataset of prescription drug expenditure
prescription_drug <- read_xlsx("data/prescription_drug_expenditure_us_1960_2022.xlsx")

# Change Date format
prescription_drug$Year <- as.Date(paste(prescription_drug$Year, "01", "01", sep = "-"), format = "%Y-%m-%d")
colnames(prescription_drug)[2] <- "Prescription_Drug_Expenditure"

# Merge the three datasets
healthcare_data <- merge(average_life_expectancy, prescription_drug, by = "Year")

healthcare_data <- healthcare_data[, -c(2)]
```

## Data Visualization

The graph presents the trends of average life expectancy alongside prescription drug expenditure over the years. `Average Life expectancy` shows an increase over time until a sharp drop in 2020, which could be due to the COVID-19 pandemic. The `prescription drug expenditure` appears to have a consistent upward trend, indicating growing costs or increased consumption of medications.

```{r data_visualization_4}
#| code-fold: true

healthcare_ts <- ts(healthcare_data[, c(2:3)], start = c(2005), end = 2023, frequency = 1)

autoplot(healthcare_ts, facets = TRUE, color="#27aeef") + xlab("Year") +
  ggtitle("Average Life Expectancy vs Health Insurance Coverage and Prescription Drug Expenditure")
```

## VARselect

The `VARselect` function is used to select the optimal `p` for the VAR model. From the results, we can see that the optimal `p` are 3 and 4.

```{r var_select_4}
#| code-fold: true

VARselect(healthcare_ts, lag.max = 4, type = "both")
```

## Initial Model Selection

Based on the `VARselect` results, we fit the VAR model with `p=3` and `p=4` to the dataset. And the `VAR(3)` model is better, based on the residual errors and number of significant variables.

```{r initial_model_4}
#| code-fold: true

summary(fitvar4<-vars::VAR(healthcare_ts, p=3, type='both'))
summary(fitvar5<-vars::VAR(healthcare_ts, p=4, type='both'))
```

## Cross-Validation

The `cross-validation` is used to find the best model for forecasting. It selects `VAR(3)` as the best model.

```{r cross_validation_4}
#| code-fold: true

folds = 5 
best_model <- NULL
best_performance <- Inf 

fold_s <- floor(nrow(healthcare_ts)/folds)

yr = rep(c(2005:2022),each =1) #year

rmse1 = data.frame()
rmse2 = data.frame()

for(fold in 1:folds){
  start <- (fold-1)*fold_s+1
  end <- fold*fold_s
  
  train_model <- healthcare_ts[-(start:end), ]
  test_model <- healthcare_ts[start:end, ]
  
  sel <- VARselect(train_model, lag.max = 4, type = "both")
  best_lag <- sel$selection[1]
  
  # Define the fit models
  fit <- vars::VAR(train_model, p=4, type= "both", season = NULL, exog = NULL)
  fit2 <- vars::VAR(train_model, p=3, type= "both", season = NULL, exog = NULL)
  
  h <- nrow(test_model)
  
  # Define the prediction
  pred <- predict(fit, n.ahead = h)
  pred2 <- predict(fit2, n.ahead = h)
  
  pred_life <- pred$fcst$Life_Expectancy[,1]
  pred_life2 <- pred2$fcst$Life_Expectancy[,1]
  
  mse <- mean((pred_life - test_model[, "Life_Expectancy"])^2)
  mse2 <- mean((pred_life2 - test_model[, "Life_Expectancy"])^2)
  
  rmse1 <- rbind(rmse1, data.frame(Life_Expectancy = sqrt(mse)))
  rmse2 <- rbind(rmse2, data.frame(Life_Expectancy = sqrt(mse2)))
  
  if(mse < best_performance){
    best_model <- fit
    best_performance <- mse
  } else if(mse2 < best_performance){
    best_model <- fit2
    best_performance <- mse2
  }

}



# Plot the RMSE of two models

plot(rmse1$Life_Expectancy, type = "l", col = "blue", xlab = "Fold", ylab = "RMSE", main = "RMSE of VAR(3) and VAR(4)")
lines(rmse2$Life_Expectancy, col = "red")
legend("topright", legend = c("VAR(4)", "VAR(3)"), col = c("blue", "red"), lty = 1)

```

## Model Creation and Diagnostics

Model `VAR(3)` is a better fit without serial correlation, based on the low p-value and ACF plots. Model VAR(3) is then used to forecast the average life expectancy and prescription drug expenditure.

```{r best_model_residuals_4, warning=FALSE}
#| code-fold: true

# VAR(3)
var_model_5 <- vars::VAR(healthcare_ts, p=3, type= "both", season = NULL, exog = NULL)
life.serial <- serial.test(var_model_5, lags.pt = 4, type = "PT.asymptotic") 
life.serial

plot(life.serial, names = "Life_Expectancy", mar = c(4, 4, 2, 1)) 
plot(life.serial, names = "Prescription_Drug_Expenditure", mar = c(4, 4, 2, 1))

# VAR(4)
var_model_6 <- vars::VAR(healthcare_ts, p=4, type= "both", season = NULL, exog = NULL)
life_2.serial <- serial.test(var_model_6, lags.pt = 4, type = "PT.asymptotic")
life_2.serial

plot(life_2.serial, names = "Life_Expectancy", mar = c(4, 4, 2, 1))
plot(life_2.serial, names = "Prescription_Drug_Expenditure", mar = c(4, 4, 2, 1))

```

## Forecasting

The forecast plot shows the predicted values for `Life Expectancy` and `Prescription Drug Expenditure` for the next several years. The forecasted values are based on the `VAR(3)` model.

The `fanchart` for life expectancy suggests a first decrease and then an increase trend, while the prescription drug expenditure is expected to increase over the next several years. We can speculate that the decrease in life expectancy could be due to the COVID-19 pandemic, which has had a significant impact on public health. Then the prescription drug expenditure is expected to increase, which will cause a rise in average life expectancy. Our forecasting conclusion aligns perfectly with the previous research findings.

```{r forecast_4}
#| code-fold: true

## Forecasting
(fit.pr = predict(fitvar4, n.ahead = 10, ci = 0.95))
fanchart(fit.pr, mar = c(4, 4, 2, 1))
```
:::

# 5. How Public Health Crisis(Covid-19) influences the financial market of Healthcare

::: panel-tabset
```{r data_load_5}
#| code-fold: true
#| code-summary: Data Collection

# Import Stock Price data
options("getSymbols.warning4.0"=FALSE)
options("getSymbols.yahoo.warning"=FALSE)

tickers = c("PFE", "VRTX", "TEVA", "SAGE")

for (i in tickers){
  getSymbols(i,
             from = "2020-12-14",
             to = "2023-05-09")}

x <- list(
  title = "date"
)
y <- list(
  title = "value"
)

stock <- data.frame(PFE$PFE.Adjusted,
                    VRTX$VRTX.Adjusted,
                    TEVA$TEVA.Adjusted,
                    SAGE$SAGE.Adjusted)


stock_2 <- data.frame(stock,rownames(stock))
colnames(stock_2) <- append(tickers,'Dates')

stock_2 <- stock_2 %>%
  rownames_to_column(var = "date")

stock_2$date<-as.Date(stock_2$Dates,"%Y-%m-%d")


# Get the covid data
covid <- read_csv("data/COVID_usa_Vacc_new.csv")

covid <- covid %>%
  dplyr::select(date, new_cases)

covid$date <- as.Date(covid$date, format = "%Y-%m-%d")
covid$new_cases <- as.double(covid$new_cases)

#replace 0's with nas
covid$new_cases[covid$new_cases==0] = NA

#Missing Value Imputation by Last Observation Carried Forward

covid[,"new_cases"] = na_locf(covid[,"new_cases"],option = 'locf',na_remaining="rev")

covid_stock <- merge(covid, stock_2, by = "date")
```

## Data Visualization

```{r data_visualization_5}
#| code-fold: true

covid_stock_ts <- ts(covid_stock[,c(2:6)], star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")), frequency = 365) # Daily data

autoplot(covid_stock_ts[,c(1:5)], facets=TRUE, color="#27aeef") +
  xlab("Date") + ylab("") + theme_bw() +
  ggtitle("Variables Influencing the Healthcare Financial Market")
```

## Auto ARIMA

The `Auto ARIMA` function suggest the best ARIMA model for the given data is ARIMA(0,1,0).

```{r auto_arima_5}
#| code-fold: true

xreg <- cbind(TEVA = covid_stock_ts[, "TEVA"],
              VRTX = covid_stock_ts[, "VRTX"],
              SAGE = covid_stock_ts[, "SAGE"],
              new_cases = covid_stock_ts[, "new_cases"])

fit_health_finance <- auto.arima(covid_stock_ts[, "PFE"], xreg = xreg)
summary(fit_health_finance)

# Check residuals
checkresiduals(fit_health_finance)
```

## Model Fitting

I first created a regression of the stock price of Pfizer(PFE) with the stock prices of Vertex Pharmaceuticals(VRTX), Teva Pharmaceutical Industries(TEVA), Sage Therapeutics(SAGE), and the new cases of Covid-19. Then I examined the residuals and fitted the models manually to find the best model based on AIC, BIC, and AICc. Next, I checked the models by doing cross-validation.

After fitting the models manually, I found that the best model is SARIMA(2,0,1)(0,1,0)\[365\] and SARIMA(1,0,0)(0,1,0)\[365\] based on AIC, BIC, and AICc.

```{r arima_fitting_5, eval=FALSE}
#| code-fold: true

# Change the data to time series
covid_stock$SPFE<-ts(covid_stock$PFE,star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)
covid_stock$VRTX<-ts(covid_stock$VRTX,star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)
covid_stock$TEVA<-ts(covid_stock$TEVA,star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)
covid_stock$SAGE<-ts(covid_stock$SAGE,star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)
covid_stock$new_cases<-ts(covid_stock$new_cases,star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)


############# First fit the linear model##########
fit.reg_health_finance <- lm(PFE ~ VRTX + TEVA + SAGE + new_cases, data=covid_stock)
summary(fit.reg_health_finance)

res.fit<-ts(residuals(fit.reg_health_finance), star=decimal_date(as.Date("2020-12-14",format = "%Y-%m-%d")),frequency = 365.25)

ggAcf(res.fit, lag.max = 30)
ggPacf(res.fit, lag.max = 30)

# We have to difference the data
res.fit %>%
  diff() %>%
  diff(365) %>%
  ggtsdisplay()

# Manual Fitting the models
#p=8, q=8, d=2, P=1, Q=1, D=1, s=365

SARIMA.c=function(p1,p2,q1,q2,P1,Q1,d1,d2,data){
  
  temp=c()
  d=1
  D=1
  s=365
  
  i=1
  temp= data.frame()
  ls=matrix(rep(NA,9*42),nrow=42)
  
  
  for (p in p1:p2)
  {
    for(q in q1:q2)
    {
      for(P in P1:P1)
      {
        for(Q in Q1:Q1)
        {
          for(d in d1:d2)
       
        {
          if(p+d+q+P+D+Q<=8)
          {
            
            model<- Arima(data,order=c(p-1,d,q-1),seasonal=c(P-1,D,Q-1))
            ls[i,]= c(p-1,d,q-1,P-1,D,Q-1,model$aic,model$bic,model$aicc)
            i=i+1
            #print(i)
            
          }
          
        }
      }
    }
    
  }
  
  }
  temp= as.data.frame(ls)
  names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
  
  temp
  
}

##q=1,3 Q=1 , p=1,2, P=1,2 d=0,1 

output=SARIMA.c(p1=1,p2=8,q1=1,q2=8,P1=1,Q1=1,d1=0,d2=1,data=res.fit)

#output
output[which.min(output$AIC),] 
output[which.min(output$BIC),]
output[which.min(output$AICc),]
```

## Best Models Residuals

```{r best_model_residuals_5, eval=FALSE}
#| code-fold: true

print('----------------------------BEST MODEL----------------------------------------------')
# Adjust the order and include the seasonal components for the best model
model_output_health_finance_best <- Arima(res.fit, order=c(2,0,1), 
                                  seasonal=list(order=c(0,1,0), period=365),
                                  include.drift = TRUE)
summary(model_output_health_finance_best)

print('--------------------------SECOND BEST MODEL------------------------------------------')
# Adjust the order and include the seasonal components for the second best model
model_output_health_finance_second_best <- Arima(res.fit, order=c(1,0,0),
                                         seasonal=list(order=c(0,1,0), period=365),
                                         include.drift = TRUE)
summary(model_output_health_finance_second_best)
```

## Cross-Validation

```{r cross_validation_5, eval=FALSE}
#| code-fold: true

len <- length(res.fit)
x <- 30
train_size <- len - x
st <- tsp(res.fit)[1]+(292-1)/365

# Initialize vectors to store the forecast errors
errors1 <- numeric(x)
errors2 <- numeric(x)

# Loop over the forecast horizon
for (i in 1:x) {
  train_ts <- window(res.fit, end=c(st + i - 1))
  
                                                                              model1 <- Arima(res.fit, order=c(2,0,1),
                                                                                              seasonal=list(order=c(0,1,0), period=365),
                                                                                              include.drift = TRUE)
                                                                                                
  model2 <- Arima(res.fit, order=c(1,0,0),
                  seasonal=list(order=c(0,1,0), period=365),
                  include.drift = TRUE)

  forecast1 <- forecast(model1, h=2)
  forecast2 <- forecast(model2, h=2)

  errors1[i] <- res.fit[train_size + i] - forecast1$mean
  errors2[i] <- res.fit[train_size + i] - forecast2$mean
}

# Calculate RMSE for each model
rmse1 <- sqrt(mean(errors1^2))
rmse2 <- sqrt(mean(errors2^2))

# Create a data frame for plotting
rmse_data <- data.frame(
  Time = 1:x,
  RMSE_Model1 = sqrt(cumsum(errors1^2) / 1:x),
  RMSE_Model2 = sqrt(cumsum(errors2^2) / 1:x)
)

#print(paste("MAE Model 1:", mae_B))
print(paste("RMSE Model 1:", rmse1))

#print(paste("MAE Model 2:", mae_sB))
print(paste("RMSE Model 2:", rmse2))

# Function to compare models based on MAE and RMSE
compare_models <- function(rmse1, rmse2) {
  if (rmse1 < rmse2) {
    return("Model 1 is better based on RMSE")
  } else if (rmse2 < rmse1) {
    return("Model 2 is better based on RMSE")
  } else {
    return("The models perform differently across metrics. Further analysis is required.")
  }
}
  
# Comparing the models
result <- compare_models(rmse1,rmse2)
print(result)

# Melt the data into long format
rmse_long <- reshape2::melt(rmse_data, id.vars = 'Time', variable.name = 'Model', value.name = 'RMSE')

# Plot the RMSE for both models
ggplot(rmse_long, aes(x = Time, y = RMSE, colour = Model)) +
  geom_line() +
  labs(title = "RMSE Comparison Over Time", x = "Time", y = "RMSE") +
  theme_minimal()
```

## Fit the Best Model

```{r}
```

## Forecasting

```{r}
```
:::

### References

\[1\] Yousaf, I., Pham, L., & Goodell, J. W. (2023). Interconnectedness between healthcare tokens and healthcare stocks: Evidence from a quantile VAR approach. International Review of Economics & Finance, 86, 271-283. [Available here](https://www.sciencedirect.com/science/article/pii/S1059056023000825)

\[2\] Haydier, E. A., Albarwari, N. H. S., & Ali, T. H. (2023). The Comparison Between VAR and ARIMAX Time Series Models in Forecasting. Iraqi Journal of Statistical Sciences, 20(2), 249-262. [Available here](https://www.mosuljournals.com/article_181260.html)

\[3\] Adu, W. K., Appiahene, P., & Afrifa, S. (2023). VAR, ARIMAX and ARIMA models for nowcasting unemployment rate in Ghana using Google trends. Journal of Electrical Systems and Information Technology, 10(1), 12. [Available here](https://link.springer.com/article/10.1186/s43067-023-00078-1)

\[4\] Ulyah, S. M. (2019, July). Forecasting index and stock returns by considering the effect of Indonesia pre-presidential election 2019 using ARIMAX and VARX approches. In Journal of Physics: Conference Series (Vol. 1277, No. 1, p. 012053). IOP Publishing. [Available here](https://iopscience.iop.org/article/10.1088/1742-6596/1277/1/012053/meta)

\[5\] Baker, D., & Fugh-Berman, A. (2009). Do new drugs increase life expectancy? A critique of a Manhattan Institute paper. Journal of general internal medicine, 24(5), 678--682. [Available here](https://doi.org/10.1007/s11606-009-0954-4)
